[global_tags]

[agent]
  interval = "2s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "1s"
  flush_jitter = "0.1s"
  precision = ""
  hostname = ""
  omit_hostname = false

# ===============================================================================
#                             OUTPUTS
# ===============================================================================

[[outputs.influxdb_v2]]
  urls = ["http://influxdb_proyecto:8086"]
  token = "${INFLUX_TOKEN}"
  organization = "${INFLUX_ORG}"
  bucket = "${INFLUX_BUCKET}"

# ===============================================================================
#                               INPUTS
# ===============================================================================

[[inputs.cpu]]
  percpu = true
  totalcpu = true

[[inputs.mem]]

# ===============================================================================
#                    CONFIGURACION MQTT ANTERIOR (COMENTADO)
# ===============================================================================

# Recolección de datos de logística desde MQTT broker local (COMENTADO)
# [[inputs.mqtt_consumer]]
#   servers = ["tcp://mosquitto_proyecto:1883"]
#   topics = ["logistica/ubicacion/#"]
#   data_format = "json"
#   username = "miusuario"
#   password = "password"
#   tag_keys = ["camion_id"]
#   json_string_fields = ["estado", "orden_actual", "cliente", "tiempo_salida", "tiempo_entrega", "tiempo_carga", "destino_nombre"]
#   persistent_session = false
#   client_id = "telegraf_logistica"
#   connection_timeout = "10s"
#   qos = 0

# Recolección generales (COMENTADO)
# [[inputs.mqtt_consumer]]
#   servers = ["tcp://mosquitto_proyecto:1883"]
#   topics = ["logistica/estadisticas"]
#   data_format = "json"
#   username = "miusuario"
#   password = "password"
#   tag_keys = ["camion_id"]
#   json_string_fields = ["estado", "orden_actual", "cliente", "tiempo_salida", "tiempo_entrega"]
#   persistent_session = false
#   client_id = "telegraf_stats"
#   connection_timeout = "10s"
#   qos = 0

# Recolección pendientes (COMENTADO)
# [[inputs.mqtt_consumer]]
#   servers = ["tcp://mosquitto_proyecto:1883"]
#   topics = ["logistica/pedidos"]
#   data_format = "json"
#   username = "miusuario"
#   password = "password"
#   tag_keys = ["camion_id"]
#   json_string_fields = ["estado", "orden_actual", "cliente", "tiempo_salida", "tiempo_entrega"]
#   persistent_session = false
#   client_id = "telegraf_pedidos"
#   connection_timeout = "10s"
#   qos = 0

# ===============================================================================
#                      CONFIGURACION AWS IoT CORE (NUEVO)
# ===============================================================================

# Recolección de datos de ubicación desde AWS IoT Core
[[inputs.mqtt_consumer]]
  # AWS IoT Core endpoint con SSL
  servers = ["ssl://${AWS_IOT_ENDPOINT}:${AWS_IOT_PORT}"]
  
  # Topics AWS IoT - ubicación de dispositivos
  topics = ["logistica/ubicacion/+"]
  
  data_format = "json"
  
  # Certificados AWS IoT (rutas relativas desde contenedor)
  tls_ca = "/certificates/AmazonRootCA1.pem"
  tls_cert = "/certificates/device-certificate.pem.crt"
  tls_key = "/certificates/private.pem.key"
  
  # Configuración SSL
  tls_enable = true
  tls_insecure_skip_verify = false
  
  # Tags y campos para InfluxDB
  tag_keys = ["device_id", "precision_baja"]
  json_string_fields = ["device_id"]
  
  # Configuración MQTT
  persistent_session = false
  client_id = "telegraf_aws_ubicacion"
  connection_timeout = "30s"
  qos = 1
  
  # Configuración adicional para AWS IoT
  keep_alive = 60

# Recolección de datos de mapeo/pedidos desde AWS IoT Core
[[inputs.mqtt_consumer]]
  # AWS IoT Core endpoint con SSL
  servers = ["ssl://${AWS_IOT_ENDPOINT}:${AWS_IOT_PORT}"]
  
  # Topics AWS IoT - datos de mapeo
  topics = ["logistica/pedidos"]
  
  data_format = "json"
  
  # Certificados AWS IoT
  tls_ca = "/certificates/AmazonRootCA1.pem"
  tls_cert = "/certificates/device-certificate.pem.crt"
  tls_key = "/certificates/private.pem.key"
  
  # Configuración SSL
  tls_enable = true
  tls_insecure_skip_verify = false
  
  # Tags y campos para InfluxDB
  tag_keys = ["device_id", "tipo", "id", "precision_baja"]
  json_string_fields = ["device_id", "tipo", "id"]
  
  # Configuración MQTT
  persistent_session = false
  client_id = "telegraf_aws_pedidos"
  connection_timeout = "30s"
  qos = 1
  
  # Configuración adicional para AWS IoT
  keep_alive = 60

# Recolección de datos de diagnóstico desde AWS IoT Core
[[inputs.mqtt_consumer]]
  # AWS IoT Core endpoint con SSL
  servers = ["ssl://${AWS_IOT_ENDPOINT}:${AWS_IOT_PORT}"]
  
  # Topics AWS IoT - información de diagnóstico
  topics = ["logistica/info/+"]
  
  data_format = "json"
  
  # Certificados AWS IoT
  tls_ca = "/certificates/AmazonRootCA1.pem"
  tls_cert = "/certificates/device-certificate.pem.crt"
  tls_key = "/certificates/private.pem.key"
  
  # Configuración SSL
  tls_enable = true
  tls_insecure_skip_verify = false
  
  # Tags y campos para InfluxDB
  tag_keys = ["device_id", "estado_wifi", "estado_mqtt", "estado_gps"]
  json_string_fields = ["device_id", "estado_wifi", "estado_mqtt", "estado_gps"]
  
  # Configuración MQTT
  persistent_session = false
  client_id = "telegraf_aws_diagnostico"
  connection_timeout = "30s"
  qos = 1
  
  # Configuración adicional para AWS IoT
  keep_alive = 60

# ===============================================================================
#                              OTROS INPUTS (MANTENIDOS)
# ===============================================================================

# API del clima (MANTENIDO)
[[inputs.http]]
  urls = ["https://api.open-meteo.com/v1/forecast?latitude=-31.41&longitude=-64.18&current=temperature_2m&forecast_days=1"]
  data_format = "json"
  name_override = "clima_cordoba"
  interval = "5m"
  json_query = "current"
  json_string_fields = ["time"]