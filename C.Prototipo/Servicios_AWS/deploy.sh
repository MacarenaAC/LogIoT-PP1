#!/bin/bash

# ===============================================================================
# Script de Deploy para LogIoT en AWS EC2
# Instancia: i-0bc76477363cad454 (13.59.117.187)
# ===============================================================================

set -e  # Salir si hay alg√∫n error

echo "üöÄ Iniciando deploy de LogIoT en AWS EC2..."
echo "üìã Instancia: i-0bc76477363cad454 (13.59.117.187)"
echo ""

# ===============================================================================
# 1. SUBIR ARCHIVO AWS.ZIP
# ===============================================================================
echo "üì§ Paso 1: Subiendo archivo aws.zip..."
if [ ! -f "aws.zip" ]; then
    echo "‚ùå Error: No se encontr√≥ el archivo aws.zip"
    echo "   Aseg√∫rate de tener el archivo aws.zip en el directorio actual"
    exit 1
fi

scp -i logiot.pem aws.zip ec2-user@13.59.117.187:/home/ec2-user/
echo "‚úÖ Archivo aws.zip subido exitosamente"

# ===============================================================================
# 2. CONECTAR Y DESCOMPRIMIR
# ===============================================================================
echo ""
echo "üì¶ Paso 2: Descomprimiendo archivos en EC2..."
ssh -i logiot.pem ec2-user@13.59.117.187 << 'EOF'
    echo "üîç Verificando archivo aws.zip..."
    if [ ! -f "aws.zip" ]; then
        echo "‚ùå Error: aws.zip no encontrado en EC2"
        exit 1
    fi
    
    echo "üóÇÔ∏è Creando directorio Servicios_AWS..."
    rm -rf Servicios_AWS
    mkdir -p Servicios_AWS
    
    echo "üìÇ Descomprimiendo aws.zip..."
    unzip -q aws.zip -d Servicios_AWS/
    
    echo "üìÅ Verificando contenido descomprimido..."
    ls -la Servicios_AWS/
    
    echo "‚úÖ Archivos descomprimidos exitosamente"
EOF

# ===============================================================================
# 3. INSTALAR DEPENDENCIAS EN EC2
# ===============================================================================
echo ""
echo "‚öôÔ∏è Paso 3: Instalando dependencias en EC2..."
ssh -i logiot.pem ec2-user@13.59.117.187 << 'EOF'
    echo "üîÑ Actualizando sistema..."
    sudo yum update -y
    
    echo "üê≥ Instalando Docker..."
    sudo yum install -y docker
    sudo systemctl start docker
    sudo systemctl enable docker
    sudo usermod -a -G docker ec2-user
    
    echo "üîß Instalando Docker Compose..."
    sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    
    echo "üì¶ Instalando unzip (por si no est√° instalado)..."
    sudo yum install -y unzip
    
    echo "üîç Verificando instalaciones..."
    docker --version
    docker-compose --version
    
    echo "‚úÖ Dependencias instaladas correctamente"
EOF

# ===============================================================================
# 4. CONFIGURAR ARCHIVO .ENV
# ===============================================================================
echo ""
echo "üîê Paso 4: Configurando archivo .env..."
ssh -i logiot.pem ec2-user@13.59.117.187 << 'EOF'
    cd Servicios_AWS
    
    echo "üìù Creando archivo .env desde env..."
    if [ -f "env" ]; then
        cp env .env
        echo "‚úÖ Archivo .env creado desde env"
    else
        echo "‚ùå Error: Archivo env no encontrado"
        exit 1
    fi
    
    echo "üîç Verificando archivo .env..."
    cat .env
EOF

# ===============================================================================
# 5. CONFIGURAR CERTIFICADOS
# ===============================================================================
echo ""
echo "üîí Paso 5: Configurando certificados..."
ssh -i logiot.pem ec2-user@13.59.117.187 << 'EOF'
    cd Servicios_AWS
    
    echo "üìÅ Verificando directorio certificates..."
    if [ -d "certificates" ]; then
        echo "‚úÖ Directorio certificates encontrado"
        ls -la certificates/
    else
        echo "‚ö†Ô∏è Directorio certificates no encontrado, creando estructura..."
        mkdir -p certificates
        echo "üìù Creando archivos de certificados vac√≠os (debes copiar los reales)..."
        touch certificates/AmazonRootCA1.pem
        touch certificates/Grupo1-certificate.pem.crt
        touch certificates/Grupo1-private.pem.key
        echo "‚ö†Ô∏è IMPORTANTE: Debes copiar los certificados reales a la carpeta certificates/"
    fi
EOF

# ===============================================================================
# 6. LEVANTAR DOCKER COMPOSE
# ===============================================================================
echo ""
echo "üê≥ Paso 6: Levantando servicios con Docker Compose..."
ssh -i logiot.pem ec2-user@13.59.117.187 << 'EOF'
    cd Servicios_AWS
    
    echo "üîç Verificando archivos necesarios..."
    ls -la docker-compose.yml
    ls -la .env
    
    echo "üèóÔ∏è Construyendo y levantando contenedores..."
    sudo docker-compose down 2>/dev/null || true  # Limpiar contenedores previos
    sudo docker-compose up -d --build
    
    echo "‚è≥ Esperando que los servicios se inicialicen..."
    sleep 30
    
    echo "üìä Verificando estado de contenedores..."
    sudo docker-compose ps
    
    echo "üìã Verificando logs de inicializaci√≥n..."
    echo "=== LOGS WEB APP ==="
    sudo docker-compose logs --tail=10 web_app
    echo ""
    echo "=== LOGS INFLUXDB ==="
    sudo docker-compose logs --tail=10 influxdb
    echo ""
    echo "=== LOGS TELEGRAF ==="
    sudo docker-compose logs --tail=10 telegraf
    echo ""
    echo "=== LOGS GRAFANA PDC AGENT ==="
    sudo docker-compose logs --tail=10 grafana-pdc-agent
EOF

# ===============================================================================
# 7. VERIFICACI√ìN FINAL
# ===============================================================================
echo ""
echo "‚úÖ Paso 7: Verificaci√≥n final..."
ssh -i logiot.pem ec2-user@13.59.117.187 << 'EOF'
    cd Servicios_AWS
    
    echo "üåê Verificando servicios web..."
    echo "   Web App: http://13.59.117.187:5000"
    echo "   InfluxDB: http://13.59.117.187:8086"
    echo "   Estado AWS IoT: http://13.59.117.187:5000/aws-status"
    
    echo ""
    echo "üîç Estado final de contenedores:"
    sudo docker-compose ps
    
    echo ""
    echo "üìä Uso de recursos:"
    sudo docker stats --no-stream
    
    echo ""
    echo "üîß Comandos √∫tiles:"
    echo "   Ver logs: sudo docker-compose logs -f"
    echo "   Reiniciar: sudo docker-compose restart"
    echo "   Detener: sudo docker-compose down"
    echo "   Estado: sudo docker-compose ps"
EOF

echo ""
echo "üéâ ¬°Deploy completado exitosamente!"
echo ""
echo "üìã Resumen:"
echo "   ‚úÖ Archivo aws.zip subido y descomprimido"
echo "   ‚úÖ Docker y Docker Compose instalados"
echo "   ‚úÖ Archivo .env configurado"
echo "   ‚úÖ Servicios levantados con Docker Compose"
echo ""
echo "üåê URLs de acceso:"
echo "   üì± Web App: http://13.59.117.187:5000"
echo "   üìä InfluxDB: http://13.59.117.187:8086"
echo "   üîç Estado AWS IoT: http://13.59.117.187:5000/aws-status"
echo ""
echo "‚ö†Ô∏è IMPORTANTE:"
echo "   - Verifica que los certificados AWS IoT est√©n en la carpeta certificates/"
echo "   - Configura el Security Group para permitir tr√°fico en puertos 5000 y 8086"
echo "   - Revisa los logs si hay problemas: sudo docker-compose logs -f"
echo ""
echo "üöÄ ¬°LogIoT est√° listo para usar!"
