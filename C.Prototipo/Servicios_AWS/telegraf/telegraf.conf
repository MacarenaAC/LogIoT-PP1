[global_tags]

[agent]
  interval = "2s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "1s"
  flush_jitter = "0.1s"
  precision = ""
  hostname = ""
  omit_hostname = false

# ===============================================================================
#                             OUTPUTS - INFLUXDB LOCAL
# ===============================================================================

[[outputs.influxdb_v2]]
  urls = ["${INFLUXDB_URL}"]
  token = "${INFLUXDB_TOKEN}"
  organization = "${INFLUXDB_ORG}"
  bucket = "${INFLUXDB_BUCKET}"

# ===============================================================================
#                               INPUTS
# ===============================================================================

[[inputs.cpu]]
  percpu = true
  totalcpu = true

[[inputs.mem]]

# ===============================================================================
#                      CONFIGURACION AWS IoT CORE
# ===============================================================================

# Recolección de datos de ubicación desde AWS IoT Core
[[inputs.mqtt_consumer]]
  # AWS IoT Core endpoint con SSL
  servers = ["ssl://${AWS_IOT_ENDPOINT}:${AWS_IOT_PORT}"]
  
  # Topics AWS IoT - ubicación de dispositivos
  topics = ["logistica/ubicacion/+"]
  
  data_format = "json"
  
  # Certificados AWS IoT (rutas relativas desde contenedor)
  tls_ca = "/certificates/AmazonRootCA1.pem"
  tls_cert = "/certificates/device-certificate.pem.crt"
  tls_key = "/certificates/private.pem.key"
  
  # Configuración SSL
  tls_enable = true
  tls_insecure_skip_verify = false
  
  # Tags y campos para InfluxDB
  tag_keys = ["device_id", "precision_baja"]
  json_string_fields = ["device_id"]
  
  # Configuración MQTT
  persistent_session = false
  client_id = "telegraf_aws_ubicacion"
  connection_timeout = "30s"
  qos = 1
  
  # Configuración adicional para AWS IoT
  keep_alive = 60

# Recolección de datos de mapeo/pedidos desde AWS IoT Core
[[inputs.mqtt_consumer]]
  # AWS IoT Core endpoint con SSL
  servers = ["ssl://${AWS_IOT_ENDPOINT}:${AWS_IOT_PORT}"]
  
  # Topics AWS IoT - datos de mapeo
  topics = ["logistica/pedidos"]
  
  data_format = "json"
  
  # Certificados AWS IoT
  tls_ca = "/certificates/AmazonRootCA1.pem"
  tls_cert = "/certificates/device-certificate.pem.crt"
  tls_key = "/certificates/private.pem.key"
  
  # Configuración SSL
  tls_enable = true
  tls_insecure_skip_verify = false
  
  # Tags y campos para InfluxDB
  tag_keys = ["device_id", "tipo", "id", "precision_baja"]
  json_string_fields = ["device_id", "tipo", "id"]
  
  # Configuración MQTT
  persistent_session = false
  client_id = "telegraf_aws_pedidos"
  connection_timeout = "30s"
  qos = 1
  
  # Configuración adicional para AWS IoT
  keep_alive = 60

# Recolección de datos de diagnóstico desde AWS IoT Core
[[inputs.mqtt_consumer]]
  # AWS IoT Core endpoint con SSL
  servers = ["ssl://${AWS_IOT_ENDPOINT}:${AWS_IOT_PORT}"]
  
  # Topics AWS IoT - información de diagnóstico
  topics = ["logistica/info/+"]
  
  data_format = "json"
  
  # Certificados AWS IoT
  tls_ca = "/certificates/AmazonRootCA1.pem"
  tls_cert = "/certificates/device-certificate.pem.crt"
  tls_key = "/certificates/private.pem.key"
  
  # Configuración SSL
  tls_enable = true
  tls_insecure_skip_verify = false
  
  # Tags y campos para InfluxDB
  tag_keys = ["device_id", "estado_wifi", "estado_mqtt", "estado_gps"]
  json_string_fields = ["device_id", "estado_wifi", "estado_mqtt", "estado_gps"]
  
  # Configuración MQTT
  persistent_session = false
  client_id = "telegraf_aws_diagnostico"
  connection_timeout = "30s"
  qos = 1
  
  # Configuración adicional para AWS IoT
  keep_alive = 60

# ===============================================================================
#                              OTROS INPUTS
# ===============================================================================

# API del clima
[[inputs.http]]
  urls = ["https://api.open-meteo.com/v1/forecast?latitude=-31.41&longitude=-64.18&current=temperature_2m&forecast_days=1"]
  data_format = "json"
  name_override = "clima_cordoba"
  interval = "5m"
  json_query = "current"
  json_string_fields = ["time"]
